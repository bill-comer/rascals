<?xml version="1.0"?>
<project name="parmsmop" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <property name="ivy.install.version" value="2.1.0" />
  <property name="ivy.jar.dir" value="${basedir}/ivy" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
  <property name = "ivy.lib.dir" value="WebRoot/WEB-INF/lib" />

  <property file="my_build.properties"/>
  <property file="build.properties"/>

  <property environment="env" />

  <property name="compiler.path" value="${executable-file-path}"/>
  <property name="java.compiler.version" value="1.6"/>
  <property name="java.compiler" value="javac${java.compiler.version}"/>
  <property name="javac_compiler" value="${compiler.path}\javac.exe" />

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <!-- ================================================= -->
  <!--                  Classpath Settings               -->
  <!-- ================================================= -->
  <path id="compile.classpath">
    <pathelement path=".;..;" />
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <include name="**/*.zip"/>
    </fileset>
    <fileset dir="${common.dir}/Tomcat">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement path="${build.dir}"/>
  </path>

  <path id="test.compile.classpath">
     <path refid="compile.classpath" />
    <fileset dir="${test.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="checkstyle.classpath">
    <pathelement path=".;..;" />
    <pathelement location="${build.dir}"/>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <include name="**/*.zip"/>
    </fileset>
  </path>

  <path id="doc.classpath">
    <pathelement path=".;..;" />
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <include name="**/*.zip"/>
    </fileset>

    <fileset dir="${build.dir}">
      <include name="**/*.jar"/>
      <include name="**/*.zip"/>
    </fileset>
    <fileset dir="${common.dir}/Tomcat">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="deploy.classpath">
      <fileset dir="${tomcat6.catalina.ant.location}">
         <include name="**/*.jar" />
      </fileset>
      <fileset dir="${tomcat6.apache.juli.location}">
         <include name="**/*.jar" />
      </fileset>
   </path>

  <!-- ================================================= -->
  <!--          Initial Build Cleaning                   -->
  <!-- ================================================= -->
  <target name="initialClean" description="Clean for the build">
    <delete dir="${reports.dir}" />
    <delete dir="${javadoc.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${test.lib.dir}"/>
  </target>

  <!-- ================================================= -->
  <!--          Initial Build Preparation                -->
  <!-- ================================================= -->
  <target name="initialPrepare" depends="initialClean" description="Prepare for build">
    <mkdir dir="${javadoc.dir}"/>
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <!-- ================================================= -->
  <!--                  Build Cleaning                   -->
  <!-- ================================================= -->
  <target name="clean" description="Clean for the build">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}" />
    <!--<delete dir="${test.lib.dir}"/>-->
    <delete dir="${checkstyle.report.dir}" />
    <delete dir="${local.build.dir}"/>
    <delete dir="${local.dist.dir}"/>
  </target>

  <!-- ================================================= -->
  <!--                  Build Preparation                -->
  <!-- ================================================= -->
  <target name="prepare" depends="clean" description="Prepare for build">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${checkstyle.report.dir}"/>
    <!--<mkdir dir="${test.lib.dir}"/>-->
    <mkdir dir="${local.build.dir}"/>
    <mkdir dir="${local.dist.dir}"/>
  </target>

  <!-- ================================================= -->
  <!--             Label code in Subversion              -->
  <!-- ================================================= -->
  <target name="checkLabelNew" if="version">
     <echo message="Testing whether tag [${subversion.url.tags}/${project.tag.name}-${version}] already exists.  If error message says Can't make dir, this means version already exists so please use a different version" />
     <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
        <mkdir url="${subversion.url.tags}/${project.tag.name}-${version}" message="Hudson testing whether tag exists" />
     </svn>
     <property name="new.label" value="true" />
     <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
        <delete url="${subversion.url.tags}/${project.tag.name}-${version}" message="Hudson removing test tag" />
     </svn>
  </target>

  <target name="label" depends="checkLabelNew" description="Labels code in Subversion" if="new.label">
    <condition property="is.branch.set">
      <isset property="branch" />
    </condition>
    <if>
      <equals arg1="${is.branch.set}" arg2="true" />
      <then>
        <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
          <copy srcUrl="${subversion.url.branches}/${branch}" destUrl="${subversion.url.tags}/${project.tag.name}-${version}" message="Hudson labelling for release" revision="HEAD" />
        </svn>
      </then>
      <else>
        <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
          <copy srcUrl="${subversion.url.project}" destUrl="${subversion.url.tags}/${project.tag.name}-${version}" message="Hudson labelling for release" revision="HEAD" />
        </svn>
      </else>
    </if>
  </target>

  <!-- ================================================= -->
  <!--           Relabel code in Subversion              -->
  <!-- ================================================= -->
  <target name="checkLabelNewForRelabel" if="newversion">
     <echo message="Testing whether tag [${subversion.url.tags}/${project.tag.name}-${version}] already exists.  If error message says Can't make dir, this means version already exists so please use a different version" />
     <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
        <mkdir url="${subversion.url.tags}/${project.tag.name}-${newversion}" message="Hudson testing whether tag exists" />
     </svn>
     <property name="new.label.relabel" value="true" />
     <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
        <delete url="${subversion.url.tags}/${project.tag.name}-${newversion}" message="Hudson removing test tag" />
     </svn>
  </target>

  <target name="relabel" depends="checkLabelNewForRelabel" description="Relabels code in Subversion" if="new.label.relabel">
     <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
        <copy srcUrl="${subversion.url.tags}/${project.tag.name}-${oldversion}" destUrl="${subversion.url.tags}/${project.tag.name}-${newversion}" message="Hudson relabelling for release" />
     </svn>
  </target>

  <!-- ================================================= -->
  <!--                  Check out code                   -->
  <!-- ================================================= -->
  <condition property="version" value="${newversion}">
     <and>
        <isset property="newversion" />
        <not><isset property="version" /></not>
     </and>
  </condition>

  <target name="checkout" depends="prepare" description="Checks out code for a specific label" if="version">
    <delete dir="${project.base.dir}"/>
    <svn javahl="false" username="${subversion.user.name}" password="${subversion.password}">
        <checkout url="${subversion.url.tags}/${project.tag.name}-${version}/parms" destPath="${project.base.dir}" />
     </svn>
  </target>

  <!-- ================================================= -->
  <!--                 Build Compilation                 -->
  <!-- ================================================= -->
  <target name="compile" depends="clean, prepare, resolve" description="Compile application">
    <javac srcdir="${source.dir}" destdir="${build.dir}"
           debug="true" deprecation="true" compiler="${java.compiler}" 
    	     fork="yes" target="${java.compiler.version}"
           executable="${javac_compiler}">
      <compilerarg value="-Xlint:unchecked"/>
      <include name="**/*.java"/>
      <exclude name="**/log4j.properties **/*.bat"/>
      <classpath refid="compile.classpath"/>
    </javac>

    <copy todir="${build.dir}" includeEmptyDirs="yes">
      <fileset dir="${source.dir}">
        <patternset>
          <include name="**/*.properties"/>
          <include name="**/*.xml"/>
          <exclude name="**/MANIFEST.MF"/>
          <exclude name="**/log4j.properties"/>
        </patternset>
      </fileset>
    </copy>

  	<!-- test classes -->
    <javac srcdir="${testsource.dir}" destdir="${test.classes.dir.dev}"
           debug="true" deprecation="true" compiler="${java.compiler}" 
    	     fork="yes" target="${java.compiler.version}"
    	executable="${javac_compiler}">
      <compilerarg value="-Xlint:unchecked"/>
      <classpath refid="test.compile.classpath"/>
      <classpath location ="${build.dir}" />
    </javac>
  	
  	
  	<copy todir="${test.classes.dir.dev}" includeEmptyDirs="yes">
  	      <fileset dir="${testsource.dir}">
  	        <patternset>
  	          <include name="**/*.properties"/>
  	          <include name="**/*.xml"/>
              <include name="**/*.checksum"/>
  	          <exclude name="**/MANIFEST.MF"/>
  	          <exclude name="**/log4j.properties"/>
  	        </patternset>
  	      </fileset>
  	    </copy>
  </target>

  <!-- ================================================= -->
  <!--             Manifest Generation                   -->
  <!-- ================================================= -->

  <target name="manifest-version" depends="compile,test" unless="version">
    <property name="version" value="unknown"/>
  </target>

  <target name="manifest_target" depends="manifest-version"
          description="Generates manifest for war file">
     <java classname="uk.co.formfill.generateManifestText.GenerateManifestText" failonerror="true" fork="true" dir="${project.base.dir}">
        <arg value="-o" />
        <arg value="${project.name}.manifest" />
        <arg value="-projectname" />
        <arg value="${env.JOB_NAME}" />
        <arg value="-buildid" />
        <arg value="${env.BUILD_NUMBER} ${env.BUILD_ID}" />
        <arg value="-l" />
        <arg value="${version}" />
        <classpath>
           <pathelement location="${common.dir}/manifest/generatemanifesttext.jar" />
           <pathelement location="${common.dir}/manifest/log4j-1.2.14.jar" />
           <pathelement location="${common.dir}/manifest/jdom.jar" />
           <pathelement path="${java.class.path}" />
        </classpath>
     </java>
  </target>

  <!-- ================================================= -->
  <!--         Runs JUnit and Coverage Tests             -->
  <!-- ================================================= -->
  <target name="test" depends="" description="Runs JUnit and Cobertura coverage tests">
     <ant antfile="build-coverage.xml" dir="${project.base.dir}" inheritAll="false">
        <target name="test-coverage-no_integ" />
     </ant>
  </target>

  <!-- ================================================= -->
  <!--                 Checkstyle                        -->
  <!-- ================================================= -->
  <target name="checkstyle" depends="test"
          description="Performs a style check on the source code.">

    <taskdef resource="checkstyletask.properties"
             classpath="${checkstyle.lib}"/>

    <checkstyle config="${checkstyle.config}"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <formatter type="xml" tofile="${checkstyle.report.dir}/checkstyle-report.xml"/>
      <classpath refid="checkstyle.classpath"/>
      <fileset dir="${source.dir}">
        <patternset>
          <include name="**/*.java"/>
        </patternset>
      </fileset>
    </checkstyle>
  </target>

  <!-- ================================================= -->
  <!--                 Build Distribution                -->
  <!-- ================================================= -->

    <!-- ================================================= -->
    <!--                 Build Distribution                -->
    <!-- ================================================= -->
    <target name="jar" depends="manifest_target">
      <jar jarfile="${dist.dir}/${jar.name}.jar"
          basedir="${build.dir}"
          includes="uk/**/*.*,*.xml,*.properties, config/**/*.*,*"
          excludes="instrumented-classes/**/*.*,data/**/*.*,spring/**/*.*,**/*Test*.class"
          manifest="${project.base.dir}/${project.name}.manifest">
      </jar>

    </target>

  <!-- ================================================= -->
  <!--                 Document                          -->
  <!-- ================================================= -->
  <target name="document" depends="jar">
    <javadoc sourcepath="${source.dir}"
             classpathref="doc.classpath"
             destdir="${javadoc.dir}"
             author="true"
             version="true"
             use="true"
             windowtitle="PARMS API">
      <doctitle><![CDATA[<h1>PARMS</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2007-2008 Utilisoft Ltd. All Rights Reserved.</i>]]></bottom> <tag name="todo" scope="all" description="To do:"/> <group title="Group 1 Packages" packages="com.dummy.test.a*"/> <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/> <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/> <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
    </javadoc>
  </target>

  <!-- =============================================================== -->
  <!-- Creates Zip File Containing War Files and Database Scripts      -->
  <!-- =============================================================== -->
  <target name="zip"
          depends="war"
          description="Produces zip file containing dfserver and dfweb files, together with database scripts.">

    <!-- Copy database scripts into dist folder -->
     <copy todir="${dist.dir}/dbScripts">
        <fileset dir="${dbscripts.src}">
          <exclude name="config" />
        </fileset>
     </copy>

    <copy toDir="${dist.dir}/resources/">
      <fileset dir="${resources.dir}">
        <include name="**/*.*" />
      </fileset>
    </copy>

     <!-- Zip contents of dist directory -->
     <zip destfile="${dist.dir}/${zip.name}-${version}.zip"
          basedir="${dist.dir}" />
     <!-- Tidy up dist directory, leaving only zip file -->
     <delete includeemptydirs="true">
        <fileset dir="${dist.dir}">
           <exclude name="${zip.name}-${version}.zip" />
        </fileset>
     </delete>
  </target>

  <!-- ================================================= -->
  <!--               Main Targets                        -->
  <!-- ================================================= -->
  <target name="build" depends="document"
          description="Checks out and builds the war file."/>

  <target name="labelAndRelease"
          description="Labels the code, checks it out and builds zip file containing the war files and database scripts.">
     <fail unless="version">Version must be set</fail>
     <antcall target="label" />
     <antcall target="dev-build" />
  </target>

  <target name="relabelAndRelease"
          description="Copies the code under an old label to a new label,
          checks it out and builds zip file containing the war files and
          database scripts.">
     <fail unless="oldversion">oldversion must be set</fail>
     <fail unless="newversion">newversion must be set</fail>
     <antcall target="relabel" />
     <antcall target="zip" />
  </target>


  <!-- ================================================= -->
  <!--                  Build Cleaning                   -->
  <!-- ================================================= -->
<target name="clean_jar_locations" description="Clean for the jar locations used by resolve">
    <!--<delete dir="${test.lib.dir}"/>  ${project.base.dir}/test/lib lib.dir-->
   <delete>
     <fileset dir="${test.lib.dir}" includes="**/*.jar"/>
   </delete>

   <delete>
     <fileset dir="${lib.dir}" includes="**/*.jar"/>
   </delete>

   <delete>
     <fileset dir="${project.base.dir}/sources" includes="**/*.jar"/>
   </delete>
  
	 <delete>
     <fileset dir="${project.base.dir}/javadoc" includes="**/*.jar"/>
   </delete>
  
   <delete>
     <fileset dir="${cobertura.lib.dir}" includes="**/*.jar"/>
   </delete>
</target>
	
  <target name="resolveClean" depends="clean_jar_locations, resolve" description="Resolve the dependencies, cleaning jars first">
  </target>

  <target name="resolve" depends="" description="Resolve the dependencies">
    <property name="ivy.default.ivy.user.dir" value="C:/ivy/masterStore" />
    <ivy:retrieve pattern="${test.lib.dir}/[artifact]-[revision](-[classifier]).[ext]" conf="test" />
    <ivy:retrieve pattern="${ivy.lib.dir}/[artifact]-[revision](-[classifier]).[ext]" conf="build" />
    <ivy:retrieve pattern="[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="sources" />
    <ivy:retrieve pattern="[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="javadoc" />
    <ivy:retrieve pattern="[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="dbgen" />
    <ivy:retrieve pattern="${cobertura.lib.dir}/[artifact]-[revision](-[classifier]).[ext]" conf="coberturalib" />
  </target>

  <path id="dev.compile.classpath">
    <fileset dir="${local.test.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${local.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement path="${local.build.dir}"/>
  </path>

  <target name="dev-compile" depends="clean, prepare, resolve" description="Development compile application">
    <echo message="Development Project Compile"/>
    <javac srcdir="${local.source.dir}" destdir="${local.build.dir}" debug="true" deprecation="true" compiler="${compiler}" fork="yes" target="${compiler-target}" executable="${executable-file}">
      <include name="**/*.java"/>
      <exclude name="**/*.properties **/*.bat"/>
      <classpath refid="dev.compile.classpath"/>
    </javac>
  </target>

  <target name="dev-build" depends="clean, prepare, resolve, dev-compile, test" description="Development build - packaged">
    <echo message="Development build - compressed packaged"/>
    <tstamp>
      <format property="buildDate" pattern="yyyy-MM-dd"/>
      <format property="buildTime" pattern="HH:mm:ss"/>
    </tstamp>
    <jar destfile="${local.build.dir}/Parms.jar" basedir="${local.build.dir}" description="Development Parms Jar" excludes="**/*.jar">
      <fileset dir="${local.source.dir}" includes="**/*.properties **/*.xml"/>
      <manifest id="manifest">
        <attribute name="Main-Class" value="uk.co.utilisoft.parms.file.dpi.StartBuild"/>
        <attribute name="Class-Path" value=".;./lib/ojdbc14-10.2.0.1.0.jar;./lib/sqljdbc4-2.0.jar;./lib/spring-2.5.6.jar;./lib/persistence-api-1.0.jar;./lib/log4j-1.2.14.jar;./lib/joda-time-1.6.jar;./lib/hibernateutils-1.7.2.jar;./lib/hibernate-commons-annotations-3.3.0.ga.jar;./lib/hibernate-annotations-3.3.0.ga.jar;./lib/hibernate-3.2.5.ga.jar;./lib/dom4j-1.6.1.jar;./lib/commons-pool-1.5.3.jar;./lib/commons-logging-1.1.jar;./lib/commons-lang-2.1.jar;./lib/commons-dbcp-1.2.1.jar;./lib/commons-collections-3.2.jar;./lib/commons-codec-1.4.jar;./lib/cglib-2.1_3.jar;./lib/jta-1.1.jar;./lib/asm-1.5.3.jar;./lib/asm-attrs-1.5.3.jar;./lib/avalon-framework-4.1.3.jar;./lib/oro-2.0.8.jar;./lib/logkit-1.0.1.jar;./lib/antlr-2.7.6.jar;./lib/collections-generic-4.01.jar"/>
      </manifest>
    </jar>
    <copy todir="${local.build.dir}/lib/" includeEmptyDirs="yes" >
      <fileset dir="${local.test.lib.dir}">
        <include name="**/antlr-2.7.6.jar"/>
        <include name="**/sqljdbc4-2.0.jar"/>
        <include name="**/spring-2.5.6.jar"/>
        <include name="**/persistence-api-1.0.jar"/>
        <include name="**/log4j-1.2.14.jar"/>
        <include name="**/joda-time-1.6.jar"/>
        <include name="**/hibernateutils-1.7.2.jar"/>
        <include name="**/hibernate-commons-annotations-3.3.0.ga.jar"/>
        <include name="**/hibernate-annotations-3.3.0.ga.jar"/>
        <include name="**/hibernate-3.2.5.ga.jar"/>
        <include name="**/dom4j-1.6.1.jar"/>
        <include name="**/commons-pool-1.5.3.jar"/>
        <include name="**/commons-logging-1.1.jar"/>
        <include name="**/commons-lang-2.1.jar"/>
        <include name="**/commons-dbcp-1.2.1.jar"/>
        <include name="**/commons-collections-3.2.jar"/>
        <include name="**/commons-codec-1.4.jar"/>
        <include name="**/cglib-2.1_3.jar"/>
        <include name="**/asm-1.5.3.jar"/>
        <include name="**/jta-1.1.jar"/>
        <include name="**/asm-attrs-1.5.3.jar"/>
        <include name="**/avalon-framework-4.1.3.jar"/>
        <include name="**/oro-2.0.8.jar"/>
        <include name="**/logkit-1.0.1.jar"/>
        <include name="**/antlr-2.7.6.jar"/>
        <include name="**/collections-generic-4.01.jar"/>
        <include name="**/ojdbc14-10.2.0.1.0.jar"/>
      </fileset>
    </copy>
    <copy todir="${local.build.dir}/resources/" includeemptydirs="no">
      <fileset dir="${local.resources.dir}" includes="**/*.bat **/*.properties"/>
    </copy>

    <copy todir="${local.build.dir}/db_scripts" includeemptydirs="no">
          <fileset dir="${local.dbscripts.dir}/installScripts" includes="**/*"/>
    </copy>

    <!--<zip destfile="${local.dist.dir}/Parms.zip" >
      <fileset dir="${local.build.dir}" includes="**/*.jar resources/**/*.bat db_scripts/**/* **/*.properties **/*.xml"/>
    </zip> -->
  </target>

  <!-- ================================================= -->
  <!--           Build development packaged War          -->
  <!-- ================================================= -->
  <target name="dev-war" depends="dev-compile">
    <!-- Copy taglibs and library files and config files -->
    <copy todir="${local.dist.dir}">
      <fileset dir="${local.web.root.dir}">
        <exclude name="**/META-INF/*" />
      </fileset>
    </copy>
    <war basedir="${local.dist.dir}"
         warfile="${local.dist.dir}/${project.name}.war"
         webxml="${local.webinf.dir}/web.xml">
      <classes dir="${local.build.dir}">
               <include name="uk/**/*.*" />
        <include name="**/*.xml" />
        <include name="**/*.properties" />
        <exclude name="test/**/*.*" />
        <exclude name="**/*Test*.class" />
      </classes>
    </war>
    <!-- Delete temporary files in dist directory leaving war file -->
    <delete includeemptydirs="true">
      <fileset dir="${local.dist.dir}">
        <include name="**/*" />
        <exclude name="${project.name}.war" />
      </fileset>
    </delete>
  </target>

  <!-- ================================================= -->
    <!--           Build production packaged War          -->
    <!-- ================================================= -->
    <target name="war" depends="manifest_target">
      <!-- Copy taglibs and library files and config files -->
      <copy todir="${dist.dir}">
        <fileset dir="${web.root.dir}">
          <exclude name="**/META-INF/*" />
        </fileset>
      </copy>
      <war basedir="${dist.dir}"
           warfile="${dist.dir}/${project.name}.war"
           webxml="${webinf.dir}/web.xml"
           manifest="${project.base.dir}/${project.name}.manifest">
        <classes dir="${build.dir}">
          <include name="uk/**/*.*" />
          <include name="**/*.xml" />
          <include name="**/*.properties" />
          <exclude name="test/**/*.*" />
          <exclude name="**/*Test*.class" />
        </classes>
      </war>
      <!-- Delete temporary files in dist directory leaving war file -->
      <delete includeemptydirs="true">
        <fileset dir="${dist.dir}">
          <include name="**/*" />
          <exclude name="${project.name}.war" />
        </fileset>
      </delete>
    </target>

    <target name="nightlybuild" depends="war" description="used by Hudson for the nightly build">
    </target>

  <target name="release" depends="zip, compile" description="Used by hudson for labelled builds. NB:code already checked out.">
    <fail unless="version">Version must be set</fail>
  </target>

</project>